{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","history","useHistory","location","useLocation","console","log","quotes","ascending","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","order","push","pathname","list","map","quote","NoQuotesFound","noquotes","AllQuotes","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,wFCmBdC,EAhBG,SAACC,GACf,OACI,qBAAIC,UAAWC,IAAQC,KAAvB,UACI,mCACI,qCACI,4BAAIH,EAAMI,SAEd,qCAAaJ,EAAMK,YAEvB,cAAC,IAAD,CAAMJ,UAAU,MAAMK,GAAE,kBAAaN,EAAMO,IAA3C,iC,iBCiDGC,EA9CG,SAACR,GACf,IAAMS,EAAUC,cACVC,EAAWC,cAEjBC,QAAQC,IAAI,WAAYH,GAExB,IAhBgBI,EAAQC,EAkBlBC,EAAiD,QAFnC,IAAIC,gBAAgBP,EAASQ,QAEVC,IAAI,QAErCC,GApBUN,EAoBgBf,EAAMe,OApBdC,EAoBsBC,EAnBvCF,EAAOO,MAAK,SAACC,EAAQC,GACxB,OAAIR,EACOO,EAAOhB,GAAKiB,EAAOjB,GAAK,GAAK,EAE7BgB,EAAOhB,GAAKiB,EAAOjB,GAAK,GAAK,MA8B5C,OACI,eAAC,WAAD,WACI,qBAAKN,UAAWC,IAAQuB,QAAxB,SACI,yBAAQC,QAhBS,WACzB,IAAMC,EAAQV,EAAqB,OAAS,MAG5CR,EAAQmB,KAAK,CACTC,SAAUlB,EAASkB,SACnBV,OAAO,SAAD,OAAWQ,MAUb,kBACUV,EAAqB,aAAe,iBAGlD,oBAAIhB,UAAWC,IAAQ4B,KAAvB,SACKT,EAAaU,KAAI,SAACC,GAAD,OACd,cAAC,EAAD,CAEIzB,GAAIyB,EAAMzB,GACVF,OAAQ2B,EAAM3B,OACdD,KAAM4B,EAAM5B,MAHP4B,EAAMzB,a,yBCpCpB0B,EAXO,WAClB,OACI,sBAAKhC,UAAWC,IAAQgC,SAAxB,UACI,iDACA,cAAC,IAAD,CAAMjC,UAAU,MAAMK,GAAG,aAAzB,6B,gBCgCG6B,UAhCG,WACd,MAAyDC,YAAQC,KAAc,GAAxEC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,OAAcC,EAAlC,EAA4BC,KAAoBC,EAAhD,EAAgDA,MAMhD,OAJAC,qBAAU,WACNL,MACD,CAACA,IAEW,YAAXC,EAEI,qBAAKtC,UAAU,WAAf,SACI,cAAC2C,EAAA,EAAD,MAKRF,EAEI,qBAAKzC,UAAU,mBAAf,SAAmCyC,IAI5B,cAAXH,GAA4BC,GAAwC,IAAxBA,EAAaK,OAOzD,cAAC,EAAD,CAAW9B,OAAQyB,IALf,cAAC,EAAD","file":"static/js/5.7de74e6f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2dOvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3DIYb\"};","import { Link } from 'react-router-dom';\n\nimport classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n    return (\n        <li className={classes.item}>\n            <figure>\n                <blockquote>\n                    <p>{props.text}</p>\n                </blockquote>\n                <figcaption>{props.author}</figcaption>\n            </figure>\n            <Link className='btn' to={`/quotes/${props.id}`}>\n                View Fullscreen\n            </Link>\n        </li>\n    );\n};\n\nexport default QuoteItem;\n","import { Fragment } from 'react';\nimport { useHistory, useLocation } from 'react-router';\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n    return quotes.sort((quoteA, quoteB) => {\n        if (ascending) {\n            return quoteA.id > quoteB.id ? 1 : -1;\n        } else {\n            return quoteA.id < quoteB.id ? 1 : -1;\n        }\n    });\n};\n\nconst QuoteList = (props) => {\n    const history = useHistory();\n    const location = useLocation();\n\n    console.log('location', location); //@DEBUG\n\n    const queryParams = new URLSearchParams(location.search);\n\n    const isSortingAscending = queryParams.get('sort') === 'asc';\n\n    const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n    const changeSortingHandler = () => {\n        const order = isSortingAscending ? 'desc' : 'asc';\n\n        // You can build a path object to navigate to a page\n        history.push({\n            pathname: location.pathname,\n            search: `?sort=${order}`\n        });\n\n        // Or you can just construct a URL string like usual\n        // history.push(`${location.pathname}?sort=${order}`)\n    };\n\n    return (\n        <Fragment>\n            <div className={classes.sorting}>\n                <button onClick={changeSortingHandler}>\n                    Sort {isSortingAscending ? 'Descending' : 'Ascending'}\n                </button>\n            </div>\n            <ul className={classes.list}>\n                {sortedQuotes.map((quote) => (\n                    <QuoteItem\n                        key={quote.id}\n                        id={quote.id}\n                        author={quote.author}\n                        text={quote.text}\n                    />\n                ))}\n            </ul>\n        </Fragment>\n    );\n};\n\nexport default QuoteList;\n","import { Link } from 'react-router-dom';\n\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n    return (\n        <div className={classes.noquotes}>\n            <p>No quotes found!</p>\n            <Link className='btn' to='/new-quote'>\n                Add a Quote\n            </Link>\n        </div>\n    );\n};\n\nexport default NoQuotesFound;\n","import { useEffect } from \"react\";\n\nimport QuoteList from \"../components/quotes/QuoteList\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport NoQuotesFound from '../components/quotes/NoQuotesFound';\nimport useHttp from \"../hooks/use-http\";\nimport { getAllQuotes } from \"../lib/api\";\n\nconst AllQuotes = () => {\n    const {sendRequest, status, data: loadedQuotes, error} = useHttp(getAllQuotes, true);\n\n    useEffect(() => {\n        sendRequest();\n    }, [sendRequest]);\n\n    if (status === 'pending') {\n        return (\n            <div className='centered'>\n                <LoadingSpinner />\n            </div>\n        );\n    }\n\n    if (error) {\n        return (\n            <div className='centered focused'>{error}</div>\n        );\n    }\n\n    if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\n        return (\n            <NoQuotesFound />\n        );\n    }\n\n    return (\n        <QuoteList quotes={loadedQuotes} />\n    );\n};\n\nexport default AllQuotes;\n"],"sourceRoot":""}