{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","console","log","quoteId","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.d9b8753f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useRef, useEffect } from 'react';\n\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport classes from './NewCommentForm.module.css';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst NewCommentForm = (props) => {\n    const commentTextRef = useRef();\n    const { sendRequest, status, error } = useHttp(addComment);\n    const { onAddedComment } = props;\n\n    useEffect(() => {\n        if (status === 'completed' && !error) {\n            onAddedComment();\n        }\n    }, [status, error, onAddedComment]);\n\n    console.log('quoteid', props.quoteId); //@DEBUG\n\n\n    const submitFormHandler = (event) => {\n        event.preventDefault();\n\n        const enteredText = commentTextRef.current.value;\n\n        // optional: Could validate here\n\n        // send comment to server\n        sendRequest({ commentData: {text: enteredText}, quoteId: props.quoteId });\n    };\n\n    return (\n        <form className={classes.form} onSubmit={submitFormHandler}>\n            {status === 'pending' && <div className='centered'><LoadingSpinner /></div>}\n            <div className={classes.control} onSubmit={submitFormHandler}>\n                <label htmlFor='comment'>Your Comment</label>\n                <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n            </div>\n            <div className={classes.actions}>\n                <button className='btn'>Add Comment</button>\n            </div>\n        </form>\n    );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n    return (\n        <li className={classes.item}>\n            <p>{props.text}</p>\n        </li>\n    );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n\n    console.log('the props', props); //@DEBUG\n\n    return (\n        <ul className={classes.comments}>\n            {props.comments.map((comment) => (\n                <CommentItem key={comment.id} text={comment.text} />\n            ))}\n        </ul>\n    );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n    const [isAddingComment, setIsAddingComment] = useState(false);\n    const params = useParams();\n\n    console.log('params', params); //@DEBUG\n\n    const {quoteId} = params;\n\n    const {sendRequest, status, data: loadedComments} = useHttp(getAllComments);\n\n    useEffect(() => {\n        sendRequest(quoteId)\n    }, [quoteId, sendRequest]);\n\n    const startAddCommentHandler = () => {\n        setIsAddingComment(true);\n    };\n\n    const addedCommentHandler = useCallback(() => {\n        sendRequest(quoteId);\n    }, [sendRequest, quoteId]);\n\n    let comments;\n\n    if (status === 'pending') {\n        comments = (\n            <div className='centered'>\n                <LoadingSpinner />\n            </div>\n        );\n    }\n\n    if (status === 'completed' && (loadedComments && loadedComments.length > 0)) {\n        comments = <CommentsList comments={loadedComments} />;\n    }\n\n    if (status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n        comments = <p className='centered'>No comments were added yet!</p>;\n    }\n\n    return (\n        <section className={classes.comments}>\n            <h2>User Comments</h2>\n            {!isAddingComment && (\n                <button className='btn' onClick={startAddCommentHandler}>\n                    Add a Comment\n                </button>\n            )}\n            {isAddingComment && <NewCommentForm quoteId={params.quoteId} onAddedComment={addedCommentHandler} />}\n            {comments}\n        </section>\n    );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n    return (\n        <figure className={classes.quote}>\n            <p>{props.text}</p>\n            <figcaption>{props.author}</figcaption>\n        </figure>\n    );\n};\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect } from \"react\";\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\n\nimport Comments from '../components/comments/Comments';\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\n\nconst QuoteDetail = () => {\n    const params = useParams();\n    const match = useRouteMatch();\n\n    const {quoteId} = params;\n\n    const {sendRequest, status, data: loadedQuote, error} = useHttp(getSingleQuote, true);\n\n    useEffect(() => {\n        sendRequest(quoteId);\n    }, [sendRequest, quoteId]);\n\n    if (status === 'pending') {\n        return (\n            <div className='centered'>\n                <LoadingSpinner />\n            </div>\n        );\n    }\n\n    if (error) {\n        return (\n            <p className='centered'>{error}</p>\n        );\n    }\n\n    if (!loadedQuote.text) {\n        return (\n            <p>No quote found!</p>\n        );\n    }\n\n    return (\n        <Fragment>\n            <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n            <Route path={match.path} exact>\n                <div className='centered'>\n                    <Link className='btn--flat' to={`${match.url}/comments`}>\n                        Loads Comments\n                    </Link>\n                </div>\n            </Route>\n            <Route path={`${match.path}/comments`}>\n                <Comments />\n            </Route>\n        </Fragment>\n    );\n};\n\nexport default QuoteDetail;\n"],"sourceRoot":""}